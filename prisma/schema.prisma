// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../lib/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Client {
  id        String       @id @default(cuid())
  slug      String       @unique
  name      String
  domain    String?      // optional custom domain
  createdAt DateTime     @default(now())
  projects  Project[]
  users     User[]       // internal consultants & client contacts
  issues    Issue[]      // clientâ€‘submitted tickets
}

model Project {
  id          String       @id @default(cuid())
  client      Client       @relation(fields: [clientId], references: [id])
  clientId    String
  title       String
  description String
  startDate   DateTime
  endDate     DateTime?
  timeEntries TimeEntry[]  // logged by consultants only
}

model User {
  id        String       @id @default(cuid())
  email     String       @unique
  name      String?
  role      Role         @default(CLIENT)
  client    Client?      @relation(fields: [clientId], references: [id])
  clientId  String?
  entries   TimeEntry[]  // for CONSULTANT role
  issues    Issue[]      // client contacts can submit issues
}

enum Role {
  ADMIN       // manage all
  CONSULTANT  // log time, manage projects
  CLIENT      // view projects, submit issues
}

model TimeEntry {
  id          String    @id @default(cuid())
  project     Project   @relation(fields: [projectId], references: [id])
  projectId   String
  user        User      @relation(fields: [userId], references: [id])
  userId      String
  date        DateTime
  hours       Float
  description String?
}

model Issue {
  id          String     @id @default(cuid())
  client      Client     @relation(fields: [clientId], references: [id])
  clientId    String
  createdBy   User       @relation(fields: [userId], references: [id])
  userId      String
  title       String
  description String
  status      IssueStatus @default(OPEN)
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
}

enum IssueStatus {
  OPEN
  IN_PROGRESS
  RESOLVED
  CLOSED
}
